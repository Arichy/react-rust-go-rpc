// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: person.proto

package personconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "example.com/go-connect-backend/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PersonServiceName is the fully-qualified name of the PersonService service.
	PersonServiceName = "person.PersonService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PersonServiceCreatePersonProcedure is the fully-qualified name of the PersonService's
	// CreatePerson RPC.
	PersonServiceCreatePersonProcedure = "/person.PersonService/CreatePerson"
	// PersonServiceGetPersonProcedure is the fully-qualified name of the PersonService's GetPerson RPC.
	PersonServiceGetPersonProcedure = "/person.PersonService/GetPerson"
	// PersonServiceUpdatePersonProcedure is the fully-qualified name of the PersonService's
	// UpdatePerson RPC.
	PersonServiceUpdatePersonProcedure = "/person.PersonService/UpdatePerson"
	// PersonServiceDeletePersonProcedure is the fully-qualified name of the PersonService's
	// DeletePerson RPC.
	PersonServiceDeletePersonProcedure = "/person.PersonService/DeletePerson"
	// PersonServiceListPeopleProcedure is the fully-qualified name of the PersonService's ListPeople
	// RPC.
	PersonServiceListPeopleProcedure = "/person.PersonService/ListPeople"
)

// PersonServiceClient is a client for the person.PersonService service.
type PersonServiceClient interface {
	// Create a new person
	CreatePerson(context.Context, *connect.Request[gen.CreatePersonRequest]) (*connect.Response[gen.CreatePersonResponse], error)
	// Get a person by ID
	GetPerson(context.Context, *connect.Request[gen.GetPersonRequest]) (*connect.Response[gen.GetPersonResponse], error)
	// Update an existing person
	UpdatePerson(context.Context, *connect.Request[gen.UpdatePersonRequest]) (*connect.Response[gen.UpdatePersonResponse], error)
	// Delete a person by ID
	DeletePerson(context.Context, *connect.Request[gen.DeletePersonRequest]) (*connect.Response[gen.DeletePersonResponse], error)
	// List all people with optional pagination
	ListPeople(context.Context, *connect.Request[gen.ListPeopleRequest]) (*connect.Response[gen.ListPeopleResponse], error)
}

// NewPersonServiceClient constructs a client for the person.PersonService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPersonServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PersonServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	personServiceMethods := gen.File_person_proto.Services().ByName("PersonService").Methods()
	return &personServiceClient{
		createPerson: connect.NewClient[gen.CreatePersonRequest, gen.CreatePersonResponse](
			httpClient,
			baseURL+PersonServiceCreatePersonProcedure,
			connect.WithSchema(personServiceMethods.ByName("CreatePerson")),
			connect.WithClientOptions(opts...),
		),
		getPerson: connect.NewClient[gen.GetPersonRequest, gen.GetPersonResponse](
			httpClient,
			baseURL+PersonServiceGetPersonProcedure,
			connect.WithSchema(personServiceMethods.ByName("GetPerson")),
			connect.WithClientOptions(opts...),
		),
		updatePerson: connect.NewClient[gen.UpdatePersonRequest, gen.UpdatePersonResponse](
			httpClient,
			baseURL+PersonServiceUpdatePersonProcedure,
			connect.WithSchema(personServiceMethods.ByName("UpdatePerson")),
			connect.WithClientOptions(opts...),
		),
		deletePerson: connect.NewClient[gen.DeletePersonRequest, gen.DeletePersonResponse](
			httpClient,
			baseURL+PersonServiceDeletePersonProcedure,
			connect.WithSchema(personServiceMethods.ByName("DeletePerson")),
			connect.WithClientOptions(opts...),
		),
		listPeople: connect.NewClient[gen.ListPeopleRequest, gen.ListPeopleResponse](
			httpClient,
			baseURL+PersonServiceListPeopleProcedure,
			connect.WithSchema(personServiceMethods.ByName("ListPeople")),
			connect.WithClientOptions(opts...),
		),
	}
}

// personServiceClient implements PersonServiceClient.
type personServiceClient struct {
	createPerson *connect.Client[gen.CreatePersonRequest, gen.CreatePersonResponse]
	getPerson    *connect.Client[gen.GetPersonRequest, gen.GetPersonResponse]
	updatePerson *connect.Client[gen.UpdatePersonRequest, gen.UpdatePersonResponse]
	deletePerson *connect.Client[gen.DeletePersonRequest, gen.DeletePersonResponse]
	listPeople   *connect.Client[gen.ListPeopleRequest, gen.ListPeopleResponse]
}

// CreatePerson calls person.PersonService.CreatePerson.
func (c *personServiceClient) CreatePerson(ctx context.Context, req *connect.Request[gen.CreatePersonRequest]) (*connect.Response[gen.CreatePersonResponse], error) {
	return c.createPerson.CallUnary(ctx, req)
}

// GetPerson calls person.PersonService.GetPerson.
func (c *personServiceClient) GetPerson(ctx context.Context, req *connect.Request[gen.GetPersonRequest]) (*connect.Response[gen.GetPersonResponse], error) {
	return c.getPerson.CallUnary(ctx, req)
}

// UpdatePerson calls person.PersonService.UpdatePerson.
func (c *personServiceClient) UpdatePerson(ctx context.Context, req *connect.Request[gen.UpdatePersonRequest]) (*connect.Response[gen.UpdatePersonResponse], error) {
	return c.updatePerson.CallUnary(ctx, req)
}

// DeletePerson calls person.PersonService.DeletePerson.
func (c *personServiceClient) DeletePerson(ctx context.Context, req *connect.Request[gen.DeletePersonRequest]) (*connect.Response[gen.DeletePersonResponse], error) {
	return c.deletePerson.CallUnary(ctx, req)
}

// ListPeople calls person.PersonService.ListPeople.
func (c *personServiceClient) ListPeople(ctx context.Context, req *connect.Request[gen.ListPeopleRequest]) (*connect.Response[gen.ListPeopleResponse], error) {
	return c.listPeople.CallUnary(ctx, req)
}

// PersonServiceHandler is an implementation of the person.PersonService service.
type PersonServiceHandler interface {
	// Create a new person
	CreatePerson(context.Context, *connect.Request[gen.CreatePersonRequest]) (*connect.Response[gen.CreatePersonResponse], error)
	// Get a person by ID
	GetPerson(context.Context, *connect.Request[gen.GetPersonRequest]) (*connect.Response[gen.GetPersonResponse], error)
	// Update an existing person
	UpdatePerson(context.Context, *connect.Request[gen.UpdatePersonRequest]) (*connect.Response[gen.UpdatePersonResponse], error)
	// Delete a person by ID
	DeletePerson(context.Context, *connect.Request[gen.DeletePersonRequest]) (*connect.Response[gen.DeletePersonResponse], error)
	// List all people with optional pagination
	ListPeople(context.Context, *connect.Request[gen.ListPeopleRequest]) (*connect.Response[gen.ListPeopleResponse], error)
}

// NewPersonServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPersonServiceHandler(svc PersonServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	personServiceMethods := gen.File_person_proto.Services().ByName("PersonService").Methods()
	personServiceCreatePersonHandler := connect.NewUnaryHandler(
		PersonServiceCreatePersonProcedure,
		svc.CreatePerson,
		connect.WithSchema(personServiceMethods.ByName("CreatePerson")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceGetPersonHandler := connect.NewUnaryHandler(
		PersonServiceGetPersonProcedure,
		svc.GetPerson,
		connect.WithSchema(personServiceMethods.ByName("GetPerson")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceUpdatePersonHandler := connect.NewUnaryHandler(
		PersonServiceUpdatePersonProcedure,
		svc.UpdatePerson,
		connect.WithSchema(personServiceMethods.ByName("UpdatePerson")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceDeletePersonHandler := connect.NewUnaryHandler(
		PersonServiceDeletePersonProcedure,
		svc.DeletePerson,
		connect.WithSchema(personServiceMethods.ByName("DeletePerson")),
		connect.WithHandlerOptions(opts...),
	)
	personServiceListPeopleHandler := connect.NewUnaryHandler(
		PersonServiceListPeopleProcedure,
		svc.ListPeople,
		connect.WithSchema(personServiceMethods.ByName("ListPeople")),
		connect.WithHandlerOptions(opts...),
	)
	return "/person.PersonService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PersonServiceCreatePersonProcedure:
			personServiceCreatePersonHandler.ServeHTTP(w, r)
		case PersonServiceGetPersonProcedure:
			personServiceGetPersonHandler.ServeHTTP(w, r)
		case PersonServiceUpdatePersonProcedure:
			personServiceUpdatePersonHandler.ServeHTTP(w, r)
		case PersonServiceDeletePersonProcedure:
			personServiceDeletePersonHandler.ServeHTTP(w, r)
		case PersonServiceListPeopleProcedure:
			personServiceListPeopleHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPersonServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPersonServiceHandler struct{}

func (UnimplementedPersonServiceHandler) CreatePerson(context.Context, *connect.Request[gen.CreatePersonRequest]) (*connect.Response[gen.CreatePersonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("person.PersonService.CreatePerson is not implemented"))
}

func (UnimplementedPersonServiceHandler) GetPerson(context.Context, *connect.Request[gen.GetPersonRequest]) (*connect.Response[gen.GetPersonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("person.PersonService.GetPerson is not implemented"))
}

func (UnimplementedPersonServiceHandler) UpdatePerson(context.Context, *connect.Request[gen.UpdatePersonRequest]) (*connect.Response[gen.UpdatePersonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("person.PersonService.UpdatePerson is not implemented"))
}

func (UnimplementedPersonServiceHandler) DeletePerson(context.Context, *connect.Request[gen.DeletePersonRequest]) (*connect.Response[gen.DeletePersonResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("person.PersonService.DeletePerson is not implemented"))
}

func (UnimplementedPersonServiceHandler) ListPeople(context.Context, *connect.Request[gen.ListPeopleRequest]) (*connect.Response[gen.ListPeopleResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("person.PersonService.ListPeople is not implemented"))
}
